{"version":3,"sources":["logo.jpg","components/helpers/ServerAPI/GetServerStatusAjaxHelper.jsx","components/TopNavBar/TopNavBar.jsx","components/helpers/ServerAPI/StartServerAjaxHelper.jsx","components/helpers/ServerAPI/StopServerAjaxHelper.jsx","components/helpers/ServerAPI/GetInstanceDetailsAjaxHelper.jsx","components/helpers/ToastHelper.jsx","components/helpers/ServerStatus.jsx","components/Server/Server.jsx","pages/ServerPage.jsx","App.jsx","serviceWorker.js","index.js"],"names":["GetServerStatusAjaxHelper","apiKey","$","ajax","type","url","data","beforeSend","xhr","setRequestHeader","then","result","TopNavBar","logout","Navbar","collapseOnSelect","expand","bg","variant","Brand","to","src","logo","className","alt","Toggle","aria-controls","Collapse","id","Nav","Link","onClick","icon","faSignOutAlt","StartServerAjaxHelper","StopServerAjaxHelper","GetInstanceDetailsAjaxHelper","ToastHelper","errorMessage","toast","error","successMessage","success","warning","warn","info","RUNNING","STOPPED","PENDING","Server","serverStatus","getServerStatus","startServer","stopServer","serverDetails","useState","loading","setLoading","timeRunning","setTimeRunning","serverStartTime","setServerStartTime","timer","useRef","updateTimeRunning","useCallback","startTime","Date","launchTime","diff","getTime","toGMTString","toLocaleTimeString","useEffect","ServerStatus","current","setInterval","clearInterval","Row","Col","faSpinner","spin","faRedoAlt","Table","borderless","checked","readOnly","bordered","publicDnsName","publicIpAddress","availabilityZone","ServerPage","setServerStatus","setServerDetails","a","post","setTimeout","catch","displayErrorMessage","console","getServerDetails","get","response","status","App","setApiKey","apiKeyConfirmed","setApiKeyConfirmed","autoClose","hideProgressBar","Form","Group","Label","Control","placeholder","onChange","e","target","value","Button","preventDefault","confirmApiKey","basename","path","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.264bd0b1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.aeea57dc.jpg\";","import $ from \"jquery\";\n\nclass GetServerStatusAjaxHelper {\n    static async get(apiKey) {\n        return await $.ajax({\n            type: \"GET\",\n            url: \"https://03hnoouy54.execute-api.eu-west-2.amazonaws.com/live/get-ec2-status\",\n            data: \"\",\n            beforeSend: (xhr) => { xhr.setRequestHeader(\"x-api-key\", apiKey); }\n        }).then(\n            (result) => { return result; },\n            (result) => { return result; }\n        );\n    }\n}\n\nexport default GetServerStatusAjaxHelper;","import React from \"react\";\nimport { Navbar, Nav } from \"react-bootstrap\";\nimport { LinkContainer } from \"react-router-bootstrap\";\n\nimport logo from \"../../logo.jpg\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSignOutAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nimport \"./TopNavBar.css\";\n\n\n//import styles from \"admin-lte/dist/js/adminlte\";\n\nconst TopNavBar = ({logout}) => {\n    return (\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand>\n                <LinkContainer to=\"/\">\n                    <img src={logo} className=\"nav-logo\" alt=\"logo\" />\n                </LinkContainer>\n            </Navbar.Brand>\n\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\n                <Nav className=\"mr-auto\">\n                    <LinkContainer to=\"/Server\">\n                        <Nav.Link>Server</Nav.Link>\n                    </LinkContainer>\n\n                    <LinkContainer to=\"/Settings\">\n                        <Nav.Link>Settings</Nav.Link>\n                    </LinkContainer>\n                </Nav>\n\n                <Nav>\n                    <Nav.Link onClick={logout}><FontAwesomeIcon icon={faSignOutAlt} /> Logout</Nav.Link>\n                </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n    );\n};\n\nexport default TopNavBar;","import $ from \"jquery\";\n\nclass StartServerAjaxHelper {\n    static async post(apiKey) {\n        return await $.ajax({\n            type: \"POST\",\n            url: \"https://03hnoouy54.execute-api.eu-west-2.amazonaws.com/live/start-ec2-instance\",\n            data: \"\",\n            beforeSend: (xhr) => { xhr.setRequestHeader(\"x-api-key\", apiKey); }\n        }).then(\n            (result) => { return result; },\n            (result) => { return result; }\n        );\n    }\n}\n\nexport default StartServerAjaxHelper;","import $ from \"jquery\";\n\nclass StopServerAjaxHelper {\n    static async post(apiKey) {\n        return await $.ajax({\n            type: \"POST\",\n            url: \"https://03hnoouy54.execute-api.eu-west-2.amazonaws.com/live/stop-ec2-instance\",\n            data: \"\",\n            beforeSend: (xhr) => { xhr.setRequestHeader(\"x-api-key\", apiKey); }\n        }).then(\n            (result) => { return result; },\n            (result) => { return result; }\n        );\n    }\n}\n\nexport default StopServerAjaxHelper;","import $ from \"jquery\";\n\nclass GetInstanceDetailsAjaxHelper {\n    static async get(apiKey) {\n        return await $.ajax({\n            type: \"GET\",\n            url: \"https://03hnoouy54.execute-api.eu-west-2.amazonaws.com/live/get-instance-details\",\n            data: \"\",\n            beforeSend: (xhr) => { xhr.setRequestHeader(\"x-api-key\", apiKey); }\n        }).then(\n            (result) => { return result; },\n            (result) => { return result; }\n        );\n    }\n}\n\nexport default GetInstanceDetailsAjaxHelper;","import { toast } from \"react-toastify\";\n\nclass ToastHelper {\n    static displayErrorMessage(errorMessage) {\n        toast.error(errorMessage);\n    }\n\n    static displaySuccessMessage(successMessage) {\n        toast.success(successMessage);\n    }\n\n    static displayWarning(warning) {\n        toast.warn(warning);\n    }\n\n    static displayInfo(info) {\n        toast.info(info);\n    }\n}\n\nexport default ToastHelper;","export const RUNNING = \"Running\";\nexport const STOPPED = \"Stopped\";\nexport const PENDING = \"Pending\";\nexport const ERROR = \"Error\";","import React, { useRef, useState, useEffect, useCallback } from \"react\";\nimport { Row, Col, Table } from \"react-bootstrap\";\n\nimport * as ServerStatus from \"../helpers/ServerStatus\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSpinner, faRedoAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nimport \"./Server.css\";\n\nconst Server = ({ serverStatus, getServerStatus, startServer, stopServer, serverDetails }) => {\n    const [loading, setLoading] = useState(true);\n    const [timeRunning, setTimeRunning] = useState(\"\");\n    const [serverStartTime, setServerStartTime] = useState(\"\");\n    const timer = useRef(null);\n\n    const toggleServer = () => {\n        if (serverStatus === ServerStatus.STOPPED) {\n            startServer();\n        }\n        if (serverStatus === ServerStatus.RUNNING) {\n            stopServer();\n        }\n    };\n\n    const updateTimeRunning = useCallback(() => {\n        const startTime = new Date(serverDetails.launchTime);\n        const now = new Date();\n        let diff = now.getTime() - startTime.getTime();\n\n        setServerStartTime(startTime.toGMTString());\n        setTimeRunning(new Date(diff).toLocaleTimeString());\n        setLoading(false);\n    }, [setServerStartTime, setTimeRunning, serverDetails, setLoading]);\n\n    useEffect(() => {\n        setLoading(true);\n\n        if (serverStatus === ServerStatus.RUNNING) {\n            timer.current = setInterval(() => updateTimeRunning(), 1000);\n        }\n        else {\n            clearInterval(timer.current);\n        }\n\n        return () => {\n            clearInterval(timer.current);\n        };\n    }, [setTimeRunning, serverStatus, updateTimeRunning, setLoading]);\n\n    return (\n        <Row>\n            <Col>\n                <div className=\"inner-content\">\n                    <h1>\n                        <Row>\n                            <Col>\n                                Jdmcserver: {serverStatus === ServerStatus.PENDING && <FontAwesomeIcon icon={faSpinner} spin />}\n                                {serverStatus !== ServerStatus.PENDING && <>{serverStatus}</>}\n                            </Col>\n                            <Col>\n                                {serverStatus !== ServerStatus.PENDING &&\n                                    <FontAwesomeIcon className=\"refresh-icon\" icon={faRedoAlt} onClick={getServerStatus} />\n                                }\n                            </Col>\n                        </Row>\n                    </h1>\n\n                    <div className=\"server-details-content\">\n                        {serverStatus !== ServerStatus.PENDING &&\n                            <Row className=\"mt-5\">\n                                <Col>\n                                    <Table borderless>\n                                        <tbody>\n                                            <tr>\n                                                <td className=\"launch-cell\"><p>Launch/Stop Server</p></td>\n                                                <td>\n                                                    <label className=\"switch\">\n                                                        <input type=\"checkbox\" checked={serverStatus === ServerStatus.RUNNING} onClick={toggleServer} readOnly />\n                                                        <span className=\"slider round\"></span>\n                                                    </label>\n                                                </td>\n                                            </tr>\n                                        </tbody>\n                                    </Table>\n                                </Col>\n                            </Row>\n                        }\n\n                        {serverStatus === ServerStatus.RUNNING &&\n                            <>\n                                {loading &&\n                                    <>\n                                        <div>Loading..</div>\n                                    </>\n                                }\n\n                                {!loading &&\n                                    <Row>\n                                        <Col>\n                                            <Table bordered>\n                                                <tbody>\n                                                    <tr>\n                                                        <td>Server Address</td>\n                                                        <td>{serverDetails.publicDnsName}</td>\n                                                    </tr>\n                                                    <tr>\n                                                        <td>ip</td>\n                                                        <td>{serverDetails.publicIpAddress}</td>\n                                                    </tr>\n                                                    <tr>\n                                                        <td>Region</td>\n                                                        <td>{serverDetails.availabilityZone}</td>\n                                                    </tr>\n                                                    <tr>\n                                                        <td>Started</td>\n                                                        <td>{serverStartTime}</td>\n                                                    </tr>\n                                                    <tr>\n                                                        <td>Time Running</td>\n                                                        <td>{timeRunning}</td>\n                                                    </tr>\n                                                </tbody>\n                                            </Table>\n                                        </Col>\n                                    </Row>\n                                }\n                            </>\n                        }\n                    </div>\n                </div>\n            </Col>\n        </Row>\n    );\n};\n\nexport default Server;","import React, { useState, useEffect, useCallback } from \"react\";\n\nimport StartServerAjaxHelper from \"../components/helpers/ServerAPI/StartServerAjaxHelper\";\nimport StopServerAjaxHelper from \"../components/helpers/ServerAPI/StopServerAjaxHelper\";\nimport GetInstanceDetailsAjaxHelper from \"../components/helpers/ServerAPI/GetInstanceDetailsAjaxHelper\";\nimport GetServerStatusAjaxHelper from \"../components/helpers/ServerAPI/GetServerStatusAjaxHelper\";\nimport ToastHelper from \"../components/helpers/ToastHelper\";\nimport * as ServerStatus from \"../components/helpers/ServerStatus\";\nimport Server from \"../components/Server/Server\";\n\nconst ServerPage = ({ apiKey }) => {\n    const [serverStatus, setServerStatus] = useState(ServerStatus.PENDING);\n    const [serverDetails, setServerDetails] = useState({});\n\n    const startServer = async () => {\n        setServerStatus(ServerStatus.PENDING);\n\n        await StartServerAjaxHelper.post(apiKey)\n            .then(() => {\n                setTimeout(() => getServerStatus(), 15000);\n            })\n            .catch((error) => {\n                ToastHelper.displayErrorMessage(\"Error when starting the server.\");\n                console.error(error);\n            });\n    };\n\n    const stopServer = async () => {\n        setServerStatus(ServerStatus.PENDING);\n\n        await StopServerAjaxHelper.post(apiKey)\n            .then(() => {\n                setTimeout(() => getServerStatus(), 15000);\n            })\n            .catch((error) => {\n                ToastHelper.displayErrorMessage(\"Error when stopping the server.\");\n                console.error(error);\n            });\n    };\n\n    const getServerDetails = useCallback(async () => {\n        await GetInstanceDetailsAjaxHelper.get(apiKey)\n            .then((response) => {\n                setServerDetails(response);\n            }).catch((error) => {\n                ToastHelper.displayErrorMessage(\"Couldn't get server details.\");\n                console.error(error);\n            });\n    }, [apiKey, setServerDetails]);\n\n    const getServerStatus = useCallback(async () => {\n        setServerStatus(ServerStatus.PENDING);\n\n        await GetServerStatusAjaxHelper.get(apiKey)\n            .then((response) => {\n                if (response.status === ServerStatus.RUNNING) {\n                    setServerStatus(ServerStatus.RUNNING);\n                    getServerDetails();\n                }\n                if (response.status === ServerStatus.STOPPED) {\n                    setServerStatus(ServerStatus.STOPPED);\n                }\n                if (response.status === ServerStatus.PENDING) {\n                    setServerStatus(ServerStatus.PENDING);\n                    getServerStatus();\n                }\n            }).catch((error) => {\n                ToastHelper.displayErrorMessage(\"Couldn't check server status.\");\n                setServerStatus(ServerStatus.ERROR);\n                console.error(error);\n            });\n    }, [apiKey, setServerStatus, getServerDetails]);\n\n    useEffect(() => {\n        getServerStatus();\n    }, [getServerStatus]);\n\n    return (\n        <Server\n            serverStatus={serverStatus}\n            getServerStatus={getServerStatus}\n            startServer={startServer}\n            stopServer={stopServer} \n            serverDetails={serverDetails} />\n    );\n};\n\nexport default ServerPage;","import React, { useState, useCallback } from \"react\";\n\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Row, Col, Form, Button } from \"react-bootstrap\";\nimport \"admin-lte/dist/css/adminlte.min.css\";\n\nimport logo from \"./logo.jpg\";\nimport \"./App.css\";\nimport GetServerStatusAjaxHelper from \"./components/helpers/ServerAPI/GetServerStatusAjaxHelper\";\nimport TopNavBar from \"./components/TopNavBar/TopNavBar\";\nimport ServerPage from \"./pages/ServerPage\";\n\nconst App = () => {\n    const [apiKey, setApiKey] = useState(\"\");\n    const [apiKeyConfirmed, setApiKeyConfirmed] = useState(false);\n\n    const confirmApiKey = (e) => {\n        e.preventDefault();\n        getServerStatus();\n    };\n\n    const getServerStatus = useCallback(async () => {\n        await GetServerStatusAjaxHelper.get(apiKey)\n            .then(() => {\n                setApiKeyConfirmed(true);\n            }).catch(() => {\n                toast.error(\"API Key Invalid.\", { autoClose: 2500, hideProgressBar: true });\n            });\n    }, [apiKey, setApiKeyConfirmed]);\n\n    const logout = () => {\n        setApiKey(\"\");\n        setApiKeyConfirmed(false);\n    };\n\n    return (\n        <>\n            <ToastContainer />\n\n            {!apiKeyConfirmed &&\n                <>\n                    <header className=\"App-header\">\n                        <img src={logo} className=\"\" alt=\"logo\" />\n                        <p>\n                            Jdmcserver\n                        </p>\n\n                        <Form className=\"w-25 mt-3 text-center\">\n                            <Form.Group>\n                                <Form.Label>Enter an API Key</Form.Label>\n                                <Form.Control type=\"password\" placeholder=\"API-Key\" onChange={e => setApiKey(e.target.value)} />\n                            </Form.Group>\n                            <Button variant=\"outline-primary\" type=\"submit\" onClick={e => confirmApiKey(e)}>\n                                Submit\n                            </Button>\n                        </Form>\n                    </header>\n                </>\n            }\n\n            {apiKeyConfirmed &&\n                <Router basename=\"/jdmcserver-frontend/\">\n                    <Row>\n                        <Col>\n                            <TopNavBar logout={logout}/>\n                        </Col>\n                    </Row>\n\n                    <Row>\n                        <Col>\n                            <Switch>\n                                <Route path=\"//\">\n                                    <header className=\"App-header\">\n                                        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                                        <p>\n                                            Jdmcserver\n                                        </p>\n                                        <a className=\"App-link\"\n                                            href=\"https://github.com/werzl/jdmcserver\"\n                                            target=\"_blank\"\n                                            rel=\"noopener noreferrer\">GitHub\n                                        </a>\n                                    </header>\n                                </Route>\n\n                                <Route path=\"/Server/\">\n                                    <ServerPage apiKey={apiKey}/>\n                                </Route>\n\n                                <Route path=\"/Settings/\">\n                                    <Row>\n                                        <Col>\n                                            <div className=\"inner-content\">\n                                                <h1>Settings</h1>\n                                            </div>\n                                        </Col>\n                                    </Row>\n                                </Route>\n\n                            </Switch>\n                        </Col>\n                    </Row>\n                </Router>\n            }\n        </>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean (\n    window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport const register = (config) => {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won\"t work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let\"s check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                        \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n};\n\nconst registerValidSW = (swUrl, config) => {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It\"s the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n};\n\nconst checkValidServiceWorker = (swUrl, config) => {\n    // Check if the service worker can be found. If it can\"t reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n};\n\nexport const unregister = () =>{\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n};","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}