{"version":3,"sources":["logo.jpg","components/helpers/ServerAPI/GetServerStatusAjaxHelper.jsx","components/TopNavBar/TopNavBar.jsx","components/helpers/ServerAPI/StartServerAjaxHelper.jsx","components/helpers/ServerAPI/StopServerAjaxHelper.jsx","components/helpers/ServerAPI/GetInstanceDetailsAjaxHelper.jsx","components/helpers/ToastHelper.jsx","components/helpers/ServerStatus.jsx","components/Server/Server.jsx","pages/ServerPage.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","GetServerStatusAjaxHelper","apiKey","$","ajax","type","url","data","beforeSend","xhr","setRequestHeader","then","result","TopNavBar","logout","Navbar","collapseOnSelect","expand","bg","variant","Brand","to","src","logo","className","alt","Toggle","aria-controls","Collapse","id","Nav","Link","onClick","icon","faSignOutAlt","StartServerAjaxHelper","StopServerAjaxHelper","GetInstanceDetailsAjaxHelper","ToastHelper","errorMessage","toast","error","successMessage","success","warning","warn","info","PENDING","Server","serverStatus","getServerStatus","startServer","stopServer","serverDetails","useState","timeRunning","setTimeRunning","timer","useRef","updateTimeRunning","useCallback","spaceSplit","launchTime","split","slashSplit","launchDateTime","prevTime","Date","diff","getTime","toLocaleTimeString","useEffect","current","setInterval","a","clearInterval","Row","Col","ServerStatus","faSpinner","spin","faRedoAlt","Table","borderless","checked","readOnly","bordered","publicDnsName","publicIpAddress","availabilityZone","ServerPage","setServerStatus","setServerDetails","post","setTimeout","catch","displayErrorMessage","console","getServerDetails","get","response","status","App","setApiKey","apiKeyConfirmed","setApiKeyConfirmed","autoClose","hideProgressBar","Form","Group","Label","Control","placeholder","onChange","e","target","value","Button","preventDefault","confirmApiKey","basename","path","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.4c746d52.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.9f69ea93.jpg\";","import $ from \"jquery\";\r\n\r\nclass GetServerStatusAjaxHelper {\r\n    static async get(apiKey) {\r\n        return await $.ajax({\r\n            type: \"GET\",\r\n            url: \"https://03hnoouy54.execute-api.eu-west-2.amazonaws.com/live/get-ec2-status\",\r\n            data: \"\",\r\n            beforeSend: (xhr) => { xhr.setRequestHeader(\"x-api-key\", apiKey); }\r\n        }).then(\r\n            (result) => { return result; },\r\n            (result) => { return result; }\r\n        );\r\n    }\r\n}\r\n\r\nexport default GetServerStatusAjaxHelper;","import React from \"react\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\nimport { LinkContainer } from \"react-router-bootstrap\";\r\n\r\nimport logo from \"../../logo.jpg\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSignOutAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport \"./TopNavBar.css\";\r\n\r\n\r\n//import styles from \"admin-lte/dist/js/adminlte\";\r\n\r\nconst TopNavBar = ({logout}) => {\r\n    return (\r\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n            <Navbar.Brand>\r\n                <LinkContainer to=\"/\">\r\n                    <img src={logo} className=\"nav-logo\" alt=\"logo\" />\r\n                </LinkContainer>\r\n            </Navbar.Brand>\r\n\r\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n\r\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                    <LinkContainer to=\"/Server\">\r\n                        <Nav.Link>Server</Nav.Link>\r\n                    </LinkContainer>\r\n\r\n                    <LinkContainer to=\"/Settings\">\r\n                        <Nav.Link>Settings</Nav.Link>\r\n                    </LinkContainer>\r\n                </Nav>\r\n\r\n                <Nav>\r\n                    <Nav.Link onClick={logout}><FontAwesomeIcon icon={faSignOutAlt} /> Logout</Nav.Link>\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    );\r\n};\r\n\r\nexport default TopNavBar;","import $ from \"jquery\";\r\n\r\nclass StartServerAjaxHelper {\r\n    static async post(apiKey) {\r\n        return await $.ajax({\r\n            type: \"POST\",\r\n            url: \"https://03hnoouy54.execute-api.eu-west-2.amazonaws.com/live/start-ec2-instance\",\r\n            data: \"\",\r\n            beforeSend: (xhr) => { xhr.setRequestHeader(\"x-api-key\", apiKey); }\r\n        }).then(\r\n            (result) => { return result; },\r\n            (result) => { return result; }\r\n        );\r\n    }\r\n}\r\n\r\nexport default StartServerAjaxHelper;","import $ from \"jquery\";\r\n\r\nclass StopServerAjaxHelper {\r\n    static async post(apiKey) {\r\n        return await $.ajax({\r\n            type: \"POST\",\r\n            url: \"https://03hnoouy54.execute-api.eu-west-2.amazonaws.com/live/stop-ec2-instance\",\r\n            data: \"\",\r\n            beforeSend: (xhr) => { xhr.setRequestHeader(\"x-api-key\", apiKey); }\r\n        }).then(\r\n            (result) => { return result; },\r\n            (result) => { return result; }\r\n        );\r\n    }\r\n}\r\n\r\nexport default StopServerAjaxHelper;","import $ from \"jquery\";\r\n\r\nclass GetInstanceDetailsAjaxHelper {\r\n    static async get(apiKey) {\r\n        return await $.ajax({\r\n            type: \"GET\",\r\n            url: \"https://03hnoouy54.execute-api.eu-west-2.amazonaws.com/live/get-instance-details\",\r\n            data: \"\",\r\n            beforeSend: (xhr) => { xhr.setRequestHeader(\"x-api-key\", apiKey); }\r\n        }).then(\r\n            (result) => { return result; },\r\n            (result) => { return result; }\r\n        );\r\n    }\r\n}\r\n\r\nexport default GetInstanceDetailsAjaxHelper;","import { toast } from \"react-toastify\";\r\n\r\nclass ToastHelper {\r\n    static displayErrorMessage(errorMessage) {\r\n        toast.error(errorMessage);\r\n    }\r\n\r\n    static displaySuccessMessage(successMessage) {\r\n        toast.success(successMessage);\r\n    }\r\n\r\n    static displayWarning(warning) {\r\n        toast.warn(warning);\r\n    }\r\n\r\n    static displayInfo(info) {\r\n        toast.info(info);\r\n    }\r\n};\r\n\r\nexport default ToastHelper;","export const RUNNING = \"Running\";\r\nexport const STOPPED = \"Stopped\";\r\nexport const PENDING = \"Pending\";\r\nexport const ERROR = \"Error\";","import React, { useRef, useState, useEffect, useCallback } from \"react\";\r\nimport { Row, Col, Table } from \"react-bootstrap\";\r\n\r\nimport * as ServerStatus from \"../helpers/ServerStatus\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSpinner, faRedoAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport \"./Server.css\";\r\n\r\nconst Server = ({ serverStatus, getServerStatus, startServer, stopServer, serverDetails }) => {\r\n    const [timeRunning, setTimeRunning] = useState(\"\");\r\n    const timer = useRef(null);\r\n\r\n    const toggleServer = () => {\r\n        if (serverStatus === ServerStatus.STOPPED) {\r\n            startServer();\r\n        }\r\n        if (serverStatus === ServerStatus.RUNNING) {\r\n            stopServer();\r\n        }\r\n    };\r\n\r\n    const updateTimeRunning = useCallback(() => {\r\n        let spaceSplit = serverDetails.launchTime.split(\" \");\r\n        let slashSplit = spaceSplit[0].split(\"/\");\r\n        let launchDateTime = `20${slashSplit[2]}-${slashSplit[1]}-${slashSplit[0]}T${spaceSplit[1]}:${spaceSplit[2]}`;\r\n\r\n        let prevTime = new Date(launchDateTime);\r\n        let thisTime = new Date();\r\n        let diff = thisTime.getTime() - prevTime.getTime();\r\n\r\n        setTimeRunning(new Date(diff).toLocaleTimeString());\r\n    }, [setTimeRunning, serverDetails]);\r\n\r\n    useEffect(() => {\r\n        if (serverStatus === ServerStatus.RUNNING) {\r\n            timer.current = setInterval(async () => await updateTimeRunning(), 1000);\r\n        }\r\n        else {\r\n            clearInterval(timer.current);\r\n        }\r\n\r\n        return () => {\r\n            clearInterval(timer.current);\r\n        };\r\n    }, [setTimeRunning, serverStatus, updateTimeRunning]);\r\n\r\n    return (\r\n        <Row>\r\n            <Col>\r\n                <div className=\"inner-content\">\r\n                    <h1>\r\n                        <Row>\r\n                            <Col>\r\n                                Jdmcserver: {serverStatus === ServerStatus.PENDING && <FontAwesomeIcon icon={faSpinner} spin />}\r\n                                {serverStatus !== ServerStatus.PENDING && <>{serverStatus}</>}\r\n                            </Col>\r\n                            <Col>\r\n                                {serverStatus !== ServerStatus.PENDING &&\r\n                                    <FontAwesomeIcon className=\"refresh-icon\" icon={faRedoAlt} onClick={getServerStatus} />\r\n                                }\r\n                            </Col>\r\n                        </Row>\r\n                    </h1>\r\n\r\n                    <div className=\"server-details-content\">\r\n                        {serverStatus !== ServerStatus.PENDING &&\r\n                            <Row className=\"mt-5\">\r\n                                <Col>\r\n                                    <Table borderless>\r\n                                        <tbody>\r\n                                            <tr>\r\n                                                <td className=\"launch-cell\"><p>Launch/Stop Server</p></td>\r\n                                                <td>\r\n                                                    <label className=\"switch\">\r\n                                                        <input type=\"checkbox\" checked={serverStatus === ServerStatus.RUNNING} onClick={toggleServer} readOnly />\r\n                                                        <span className=\"slider round\"></span>\r\n                                                    </label>\r\n                                                </td>\r\n                                            </tr>\r\n                                        </tbody>\r\n                                    </Table>\r\n                                </Col>\r\n                            </Row>\r\n                        }\r\n\r\n                        {serverStatus === ServerStatus.RUNNING &&\r\n                            <Row>\r\n                                <Col>\r\n                                    <Table bordered>\r\n                                        <tbody>\r\n                                            <tr>\r\n                                                <td>Server Address</td>\r\n                                                <td>{serverDetails.publicDnsName}</td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>ip</td>\r\n                                                <td>{serverDetails.publicIpAddress}</td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>Region</td>\r\n                                                <td>{serverDetails.availabilityZone}</td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>Started</td>\r\n                                                <td>{serverDetails.launchTime}</td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>Time Running</td>\r\n                                                <td>{timeRunning}</td>\r\n                                            </tr>\r\n                                        </tbody>\r\n                                    </Table>\r\n                                </Col>\r\n                            </Row>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default Server;","import React, { useState, useEffect, useCallback } from \"react\";\r\n\r\nimport StartServerAjaxHelper from \"../components/helpers/ServerAPI/StartServerAjaxHelper\";\r\nimport StopServerAjaxHelper from \"../components/helpers/ServerAPI/StopServerAjaxHelper\";\r\nimport GetInstanceDetailsAjaxHelper from \"../components/helpers/ServerAPI/GetInstanceDetailsAjaxHelper\";\r\nimport GetServerStatusAjaxHelper from \"../components/helpers/ServerAPI/GetServerStatusAjaxHelper\";\r\nimport ToastHelper from \"../components/helpers/ToastHelper\";\r\nimport * as ServerStatus from \"../components/helpers/ServerStatus\";\r\nimport Server from \"../components/Server/Server\";\r\n\r\nconst ServerPage = ({ apiKey }) => {\r\n    const [serverStatus, setServerStatus] = useState(ServerStatus.PENDING);\r\n    const [serverDetails, setServerDetails] = useState({});\r\n\r\n    const startServer = async () => {\r\n        setServerStatus(ServerStatus.PENDING);\r\n\r\n        await StartServerAjaxHelper.post(apiKey)\r\n            .then(() => {\r\n                setTimeout(() => getServerStatus(), 15000);\r\n            })\r\n            .catch((error) => {\r\n                ToastHelper.displayErrorMessage(\"Error when starting the server.\");\r\n                console.error(error);\r\n            });\r\n    };\r\n\r\n    const stopServer = async () => {\r\n        setServerStatus(ServerStatus.PENDING);\r\n\r\n        await StopServerAjaxHelper.post(apiKey)\r\n            .then(() => {\r\n                setTimeout(() => getServerStatus(), 15000);\r\n            })\r\n            .catch((error) => {\r\n                ToastHelper.displayErrorMessage(\"Error when stopping the server.\");\r\n                console.error(error);\r\n            });\r\n    };\r\n\r\n    const getServerDetails = useCallback(async () => {\r\n        await GetInstanceDetailsAjaxHelper.get(apiKey)\r\n            .then((response) => {\r\n                setServerDetails(response);\r\n            }).catch((error) => {\r\n                ToastHelper.displayErrorMessage(\"Couldn't get server details.\");\r\n                console.error(error);\r\n            });\r\n    }, [apiKey, setServerDetails]);\r\n\r\n    const getServerStatus = useCallback(async () => {\r\n        setServerStatus(ServerStatus.PENDING);\r\n\r\n        await GetServerStatusAjaxHelper.get(apiKey)\r\n            .then((response) => {\r\n                if (response.status === ServerStatus.RUNNING) {\r\n                    setServerStatus(ServerStatus.RUNNING);\r\n                    getServerDetails();\r\n                }\r\n                if (response.status === ServerStatus.STOPPED) {\r\n                    setServerStatus(ServerStatus.STOPPED);\r\n                }\r\n                if (response.status === ServerStatus.PENDING) {\r\n                    setServerStatus(ServerStatus.PENDING);\r\n                    getServerStatus();\r\n                }\r\n            }).catch((error) => {\r\n                ToastHelper.displayErrorMessage(\"Couldn't check server status.\");\r\n                setServerStatus(ServerStatus.ERROR);\r\n                console.error(error);\r\n            });\r\n    }, [apiKey, setServerStatus, getServerDetails]);\r\n\r\n    useEffect(() => {\r\n        getServerStatus();\r\n    }, [getServerStatus]);\r\n\r\n    return (\r\n        <Server\r\n            serverStatus={serverStatus}\r\n            getServerStatus={getServerStatus}\r\n            startServer={startServer}\r\n            stopServer={stopServer} \r\n            serverDetails={serverDetails} />\r\n    );\r\n};\r\n\r\nexport default ServerPage;","import React, { useState, useCallback } from \"react\";\r\n\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport { Row, Col, Form, Button } from \"react-bootstrap\";\r\nimport \"admin-lte/dist/css/adminlte.min.css\";\r\n\r\nimport logo from \"./logo.jpg\";\r\nimport \"./App.css\";\r\nimport GetServerStatusAjaxHelper from \"./components/helpers/ServerAPI/GetServerStatusAjaxHelper\";\r\nimport TopNavBar from \"./components/TopNavBar/TopNavBar\";\r\nimport ServerPage from \"./pages/ServerPage\";\r\n\r\nconst App = () => {\r\n    const [apiKey, setApiKey] = useState(\"\");\r\n    const [apiKeyConfirmed, setApiKeyConfirmed] = useState(false);\r\n\r\n    const confirmApiKey = (e) => {\r\n        e.preventDefault();\r\n        getServerStatus();\r\n    };\r\n\r\n    const getServerStatus = useCallback(async () => {\r\n        await GetServerStatusAjaxHelper.get(apiKey)\r\n            .then(() => {\r\n                setApiKeyConfirmed(true);\r\n            }).catch(() => {\r\n                toast.error(\"API Key Invalid.\", { autoClose: 2500, hideProgressBar: true });\r\n            });\r\n    }, [apiKey, setApiKeyConfirmed]);\r\n\r\n    const logout = () => {\r\n        setApiKey(\"\");\r\n        setApiKeyConfirmed(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <ToastContainer />\r\n\r\n            {!apiKeyConfirmed &&\r\n                <>\r\n                    <header className=\"App-header\">\r\n                        <img src={logo} className=\"\" alt=\"logo\" />\r\n                        <p>\r\n                            Jdmcserver\r\n                        </p>\r\n\r\n                        <Form className=\"w-25 mt-3 text-center\">\r\n                            <Form.Group>\r\n                                <Form.Label>Enter an API Key</Form.Label>\r\n                                <Form.Control type=\"password\" placeholder=\"API-Key\" onChange={e => setApiKey(e.target.value)} />\r\n                            </Form.Group>\r\n                            <Button variant=\"outline-primary\" type=\"submit\" onClick={e => confirmApiKey(e)}>\r\n                                Submit\r\n                            </Button>\r\n                        </Form>\r\n                    </header>\r\n                </>\r\n            }\r\n\r\n            {apiKeyConfirmed &&\r\n                <Router basename=\"/jdmcserver-frontend/\">\r\n                    <Row>\r\n                        <Col>\r\n                            <TopNavBar logout={logout}/>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row>\r\n                        <Col>\r\n                            <Switch>\r\n                                <Route path=\"//\">\r\n                                    <header className=\"App-header\">\r\n                                        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n                                        <p>\r\n                                            Jdmcserver\r\n                                        </p>\r\n                                        <a className=\"App-link\"\r\n                                            href=\"https://github.com/werzl/jdmcserver\"\r\n                                            target=\"_blank\"\r\n                                            rel=\"noopener noreferrer\">GitHub\r\n                                        </a>\r\n                                    </header>\r\n                                </Route>\r\n\r\n                                <Route path=\"/Server/\">\r\n                                    <ServerPage apiKey={apiKey}/>\r\n                                </Route>\r\n\r\n                                <Route path=\"/Settings/\">\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <div className=\"inner-content\">\r\n                                                <h1>Settings</h1>\r\n                                            </div>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Route>\r\n\r\n                            </Switch>\r\n                        </Col>\r\n                    </Row>\r\n                </Router>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n\r\n"],"sourceRoot":""}