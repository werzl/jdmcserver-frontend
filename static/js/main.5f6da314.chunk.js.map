{"version":3,"sources":["logo.jpg","components/helpers/GetServerStatusAjaxHelper.jsx","components/TopNavBar/TopNavBar.jsx","components/helpers/ToastHelper.jsx","components/Server/Server.jsx","components/helpers/ServerStatus.jsx","pages/ServerPage.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","GetServerStatusAjaxHelper","apiKey","$","ajax","type","url","data","beforeSend","xhr","setRequestHeader","then","result","TopNavBar","logout","Navbar","collapseOnSelect","expand","bg","variant","Brand","to","src","logo","className","alt","Toggle","aria-controls","Collapse","id","Nav","Link","onClick","icon","faSignOutAlt","ToastHelper","errorMessage","toast","error","successMessage","success","warning","warn","info","Server","serverStatus","Row","Col","faSpinner","spin","md","checked","e","event","console","target","ServerPage","useState","setServerStatus","apiRetryAttempts","setApiRetryAttempts","timer","useRef","useEffect","getServerStatus","a","get","response","running","undefined","catch","displayErrorMessage","clearInterval","current","setInterval","App","setApiKey","apiKeyConfirmed","setApiKeyConfirmed","useCallback","autoClose","hideProgressBar","Form","Group","Label","Control","placeholder","onChange","value","Button","preventDefault","confirmApiKey","exact","path","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.5f6da314.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.9f69ea93.jpg\";","import $ from \"jquery\";\r\n\r\nclass GetServerStatusAjaxHelper {\r\n    static async get(apiKey) {\r\n        return await $.ajax({\r\n            type: \"GET\",\r\n            url: \"https://03hnoouy54.execute-api.eu-west-2.amazonaws.com/live/get-ec2-status\",\r\n            data: \"\",\r\n            beforeSend: (xhr) => { xhr.setRequestHeader(\"x-api-key\", apiKey); }\r\n        }).then(\r\n            (result) => { return result; },\r\n            (result) => { return result; }\r\n        );\r\n    }\r\n}\r\n\r\nexport default GetServerStatusAjaxHelper;","import React from \"react\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\nimport { LinkContainer } from \"react-router-bootstrap\";\r\n\r\nimport logo from \"../../logo.jpg\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSignOutAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport \"./TopNavBar.css\";\r\n\r\n\r\n//import styles from \"admin-lte/dist/js/adminlte\";\r\n\r\nconst TopNavBar = ({logout}) => {\r\n    return (\r\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n            <Navbar.Brand>\r\n                <LinkContainer to=\"/\">\r\n                    <img src={logo} className=\"nav-logo\" alt=\"logo\" />\r\n                </LinkContainer>\r\n            </Navbar.Brand>\r\n\r\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n\r\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                    <LinkContainer to=\"/Server\">\r\n                        <Nav.Link>Server</Nav.Link>\r\n                    </LinkContainer>\r\n\r\n                    <LinkContainer to=\"/Settings\">\r\n                        <Nav.Link>Settings</Nav.Link>\r\n                    </LinkContainer>\r\n                </Nav>\r\n\r\n                <Nav>\r\n                    <Nav.Link onClick={logout}><FontAwesomeIcon icon={faSignOutAlt} /> Logout</Nav.Link>\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    );\r\n};\r\n\r\nexport default TopNavBar;","import { toast } from \"react-toastify\";\r\n\r\nclass ToastHelper {\r\n    static displayErrorMessage(errorMessage) {\r\n        toast.error(errorMessage);\r\n    }\r\n\r\n    static displaySuccessMessage(successMessage) {\r\n        toast.success(successMessage);\r\n    }\r\n\r\n    static displayWarning(warning) {\r\n        toast.warn(warning);\r\n    }\r\n\r\n    static displayInfo(info) {\r\n        toast.info(info);\r\n    }\r\n};\r\n\r\nexport default ToastHelper;","import React from \"react\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\n\r\nimport * as ServerStatus from \"../helpers/ServerStatus\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSpinner } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport \"./Server.css\";\r\n\r\nconst Server = ({ serverStatus }) => {\r\n\r\n    const toggleServer = (event) => {\r\n        console.info(\"toggleServer invoked.\", event.target.checked);\r\n    };\r\n\r\n    return (\r\n        <Row>\r\n            <Col>\r\n                <div className=\"inner-content\">\r\n\r\n                    <h1>\r\n                        Jdmcserver status: {serverStatus === ServerStatus.PENDING && <FontAwesomeIcon icon={faSpinner} spin />}\r\n                        {serverStatus !== ServerStatus.PENDING && <>{serverStatus}</>}\r\n\r\n                    </h1>\r\n\r\n                    {serverStatus !== ServerStatus.PENDING &&\r\n                        <Row className=\"mt-3\">\r\n                            <Col md=\"3\">\r\n                                <p>Enable/Disable Server</p>\r\n                            </Col>\r\n\r\n                            <Col>\r\n                                <label className=\"switch\">\r\n                                    <input type=\"checkbox\" checked={serverStatus === ServerStatus.RUNNING} onClick={e => toggleServer(e)} />\r\n                                    <span className=\"slider round\">\r\n                                        <p className=\"mt-5\">I don't do anything yet</p>\r\n                                    </span>\r\n                                </label>\r\n                            </Col>\r\n                        </Row>\r\n                    }\r\n                </div>\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default Server;","export const RUNNING = \"Running\";\r\nexport const STOPPED = \"Stopped\";\r\nexport const PENDING = \"Pending\";\r\nexport const ERROR = \"Error\";","import React, { useState, useEffect, useRef } from \"react\";\r\n\r\nimport GetServerStatusAjaxHelper from \"../components/helpers/GetServerStatusAjaxHelper\";\r\nimport ToastHelper from \"../components/helpers/ToastHelper\";\r\nimport * as ServerStatus from \"../components/helpers/ServerStatus\";\r\nimport Server from \"../components/Server/Server\";\r\n\r\nconst ServerPage = ({ apiKey }) => {\r\n    const [serverStatus, setServerStatus] = useState(ServerStatus.PENDING);\r\n    const [apiRetryAttempts, setApiRetryAttempts] = useState(1);\r\n    const timer = useRef(null);\r\n\r\n    useEffect(() => {\r\n        const getServerStatus = async () => {\r\n            await GetServerStatusAjaxHelper.get(apiKey)\r\n                .then((response) => {\r\n                    if (response.running) {\r\n                        setServerStatus(ServerStatus.RUNNING);\r\n                    }\r\n                    if (!response.running) {\r\n                        setServerStatus(ServerStatus.STOPPED);\r\n                    }\r\n                    if (response.running === null || response.running === undefined) {\r\n                        setServerStatus(ServerStatus.PENDING);\r\n                    }\r\n                }).catch(() => {\r\n                    setApiRetryAttempts(apiRetryAttempts + 1);\r\n                    setServerStatus(ServerStatus.ERROR);\r\n                    ToastHelper.displayErrorMessage(\"Couldn't check server status.\");\r\n                });\r\n        };\r\n\r\n        if (apiRetryAttempts > 4) {\r\n            clearInterval(timer.current);\r\n        }\r\n        else {\r\n            timer.current = setInterval(async () => await getServerStatus(), 10000);\r\n        }\r\n\r\n        getServerStatus();\r\n\r\n        return () => {\r\n            clearInterval(timer.current);\r\n        };\r\n    }, [setServerStatus, apiKey, setApiRetryAttempts, apiRetryAttempts]);\r\n\r\n    return <Server serverStatus={serverStatus} />;\r\n};\r\n\r\nexport default ServerPage;","import React, { useState, useCallback } from \"react\";\r\n\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport { Row, Col, Form, Button } from \"react-bootstrap\";\r\nimport \"admin-lte/dist/css/adminlte.min.css\";\r\n\r\nimport logo from \"./logo.jpg\";\r\nimport \"./App.css\";\r\nimport GetServerStatusAjaxHelper from \"./components/helpers/GetServerStatusAjaxHelper\";\r\nimport TopNavBar from \"./components/TopNavBar/TopNavBar\";\r\nimport ServerPage from \"./pages/ServerPage\";\r\n\r\nconst App = () => {\r\n    const [apiKey, setApiKey] = useState(\"\");\r\n    const [apiKeyConfirmed, setApiKeyConfirmed] = useState(false);\r\n\r\n    const confirmApiKey = (e) => {\r\n        e.preventDefault();\r\n        getServerStatus();\r\n    };\r\n\r\n    const getServerStatus = useCallback(async () => {\r\n        await GetServerStatusAjaxHelper.get(apiKey)\r\n            .then(() => {\r\n                setApiKeyConfirmed(true);\r\n            }).catch(() => {\r\n                toast.error(\"API Key Invalid.\", { autoClose: 2500, hideProgressBar: true });\r\n            });\r\n    }, [apiKey, setApiKeyConfirmed]);\r\n\r\n    const logout = () => {\r\n        setApiKey(\"\");\r\n        setApiKeyConfirmed(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <ToastContainer />\r\n\r\n            {!apiKeyConfirmed &&\r\n                <>\r\n                    <header className=\"App-header\">\r\n                        <img src={logo} className=\"\" alt=\"logo\" />\r\n                        <p>\r\n                            Jdmcserver\r\n                        </p>\r\n\r\n                        <Form className=\"w-25 mt-3 text-center\">\r\n                            <Form.Group>\r\n                                <Form.Label>Enter an API Key</Form.Label>\r\n                                <Form.Control type=\"password\" placeholder=\"API-Key\" onChange={e => setApiKey(e.target.value)} />\r\n                            </Form.Group>\r\n                            <Button variant=\"outline-primary\" type=\"submit\" onClick={e => confirmApiKey(e)}>\r\n                                Submit\r\n                            </Button>\r\n                        </Form>\r\n                    </header>\r\n                </>\r\n            }\r\n\r\n            {apiKeyConfirmed &&\r\n                <Router>\r\n                    <Row>\r\n                        <Col>\r\n                            <TopNavBar logout={logout}/>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row>\r\n                        <Col>\r\n                            <Switch>\r\n                                <Route exact path=\"/\">\r\n                                    <header className=\"App-header\">\r\n                                        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n                                        <p>\r\n                                            Jdmcserver\r\n                                        </p>\r\n                                        <a className=\"App-link\"\r\n                                            href=\"https://github.com/werzl/jdmcserver\"\r\n                                            target=\"_blank\"\r\n                                            rel=\"noopener noreferrer\">GitHub\r\n                                        </a>\r\n                                    </header>\r\n                                </Route>\r\n\r\n                                <Route path=\"/Server\">\r\n                                    <ServerPage apiKey={apiKey}/>\r\n                                </Route>\r\n\r\n                                <Route path=\"/Settings\">\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <div className=\"inner-content\">\r\n                                                <h1>Settings</h1>\r\n                                            </div>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Route>\r\n\r\n                            </Switch>\r\n                        </Col>\r\n                    </Row>\r\n                </Router>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n\r\n"],"sourceRoot":""}